void {method_name} (float* features, int results[], const int& outputArraySize) {{
	// Quit if either inout arrays are null
	if ((results == NULL) || (features == NULL)) exit(1);

	const unsigned int n_estimators = {n_estimators};

	for (int j = 0; j < outputArraySize; j++) {{
		// Run the decision trees and collect their output for later voting.
		// Call the forest.
		for (int k = 0; k < n_estimators; k++) {{
			// Do a quick sanity check before accessing potentially dodgy memory
			if ((j * n_estimators) + k >= sizeof(predictFunctions) / sizeof(predictFunctions[0])) exit(1);

			// Sum the results as part of voting.
			// This only works because we're only dealing with zeros of ones. If there were more classes this would need changing (Average or Count?)
			results[j] += predictFunctions[(j * n_estimators) + k](features);
		}}

		// Vote on the final output. 
		// If we're more that 0.5 * n_estimators then the result is a 1 (or the average rounded to zero DPs works)
		results[j] = round((float)results[j] / (float)n_estimators);
	}}
}}